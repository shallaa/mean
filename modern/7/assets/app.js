angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,n){t.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,n){t.login=function(e,r){o.login(e,r).then(function(o){t.$emit("login",o.data),n.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({body:t.postBody}).success(function(o){t.postBody=null})},t.$on("ws:new_post",function(o,n){t.$apply(function(){t.posts.unshift(n)})}),o.fetch().then(function(o){t.posts=o})}]),angular.module("app").service("PostSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts").then(function(t){return t.data})},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,o,n){t.register=function(e,r){o.register(e,r).then(function(o){t.$emit("login",o),n.path("/")})}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){o.html5Mode({enabled:!0,requireBase:!1}),t.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return o.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,o.getUser()})},o.register=function(n,e){return t.post("/api/users",{username:n,password:e}).then(function(){return o.login(n,e)})}}]),angular.module("app").run(["$rootScope","$window",function(t,o){var n;n="https:"===o.location.protocol?"wss://"+o.location.host:"ws://"+o.location.host;var e=new WebSocket(n);e.onopen=function(){console.log("WebSocket connected")},e.onmessage=function(o){var n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldHMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsIiRsb2NhdGlvbiIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsInBhdGgiLCJQb3N0U3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInN1Y2Nlc3MiLCJwb3N0IiwiJGFwcGx5IiwicG9zdHMiLCJ1bnNoaWZ0IiwiZmV0Y2giLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwicmVnaXN0ZXIiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiaHRtbDVNb2RlIiwiZW5hYmxlZCIsInJlcXVpcmVCYXNlIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwicnVuIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCJob3N0IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJjb25zb2xlIiwibG9nIiwib25tZXNzYWdlIiwiZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCIkYnJvYWRjYXN0IiwidG9waWMiXSwibWFwcGluZ3MiOiJBQUdBQSxRQUFBQyxPQUFBLE9BQ0EsWUNKQUQsUUFBQUMsT0FBQSxPQUFBQyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FDQUEs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c0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSnVuSG8gb24gMjAxNS0wNC0yOC5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCAnYXBwJywgW1xyXG4gICAgJ25nUm91dGUnXHJcbl0gKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlciggJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSl7XHJcblx0JHNjb3BlLiRvbiggJ2xvZ2luJywgZnVuY3Rpb24oIF8sIHVzZXIgKXtcclxuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XHJcblx0fSApO1xyXG59ICk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSnVuSG8gb24gMjAxNS0wNC0yOC5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCAnTG9naW5DdHJsJywgZnVuY3Rpb24oICRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uICl7XHJcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiggdXNlcm5hbWUsIHBhc3N3b3JkICl7XHJcbiAgICAgICAgVXNlclN2Yy5sb2dpbiggdXNlcm5hbWUsIHBhc3N3b3JkKS50aGVuKCBmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCggJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSApO1xyXG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCggJy8nICk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfTtcclxufSApOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEp1bkhvIG9uIDIwMTUtMDQtMjguXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlciggJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uKCAkc2NvcGUsIFBvc3RTdmMgKXtcclxuICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBpZiggJHNjb3BlLnBvc3RCb2R5ICl7XHJcbiAgICAgICAgICAgIFBvc3RTdmMuY3JlYXRlKHtib2R5OiRzY29wZS5wb3N0Qm9keX0pLnN1Y2Nlc3MoIGZ1bmN0aW9uKHBvc3Qpe1xyXG4gICAgICAgICAgICAgICAgLy8gJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xyXG4gICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCAnd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbiggXywgcG9zdCApe1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBQb3N0U3ZjLmZldGNoKCkudGhlbiggZnVuY3Rpb24ocG9zdHMpe1xyXG4gICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzO1xyXG4gICAgfSApO1xyXG59ICk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEp1bkhvIG9uIDIwMTUtMDQtMjguXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJykuc2VydmljZSggJ1Bvc3RTdmMnLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJykudGhlbiggZnVuY3Rpb24oIHJlc3BvbnNlICl7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KXtcclxuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCggJy9hcGkvcG9zdHMnLCBwb3N0ICk7XHJcbiAgICB9O1xyXG59ICk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoICdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiggJHNjb3BlLCBVc2VyU3ZjLCAkbG9jYXRpb24gKXtcclxuXHQkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbiggdXNlcm5hbWUsIHBhc3N3b3JkICl7XHJcblx0XHRVc2VyU3ZjLnJlZ2lzdGVyKCB1c2VybmFtZSwgcGFzc3dvcmQgKS50aGVuKCBmdW5jdGlvbih1c2VyKXtcclxuXHRcdFx0JHNjb3BlLiRlbWl0KCAnbG9naW4nLCB1c2VyICk7XHJcblx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcblx0XHR9ICk7XHJcblx0fTtcclxufSApOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEp1bkhvIG9uIDIwMTUtMDQtMjguXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpe1xyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtlbmFibGVkOnRydWUsIHJlcXVpcmVCYXNlOmZhbHNlfSk7XHJcbiAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgIC53aGVuKCAnLycsIHtjb250cm9sbGVyOidQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDonL3RlbXBsYXRlcy9wb3N0cy5odG1sJ30gKVxyXG4gICAgICAgIC53aGVuKCAnL3JlZ2lzdGVyJywge2NvbnRyb2xsZXI6J1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOicvdGVtcGxhdGVzL3JlZ2lzdGVyLmh0bWwnfSApXHJcbiAgICAgICAgLndoZW4oICcvbG9naW4nLCB7Y29udHJvbGxlcjonTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6Jy90ZW1wbGF0ZXMvbG9naW4uaHRtbCd9KTtcclxufSApOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEp1bkhvIG9uIDIwMTUtMDQtMjguXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJykuc2VydmljZSggJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMubG9naW4gPSBmdW5jdGlvbiggdXNlcm5hbWUsIHBhc3N3b3JkICl7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoICcvYXBpL3Nlc3Npb25zJywge3VzZXJuYW1lOnVzZXJuYW1lLCBwYXNzd29yZDpwYXNzd29yZH0pLnRoZW4oIGZ1bmN0aW9uKHZhbCl7XHJcbiAgICAgICAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xyXG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgc3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24oIHVzZXJuYW1lLCBwYXNzd29yZCApe1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCAnL2FwaS91c2VycycsIHt1c2VybmFtZTp1c2VybmFtZSwgcGFzc3dvcmQ6cGFzc3dvcmR9ICkudGhlbiggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIHN2Yy5sb2dpbiggdXNlcm5hbWUsIHBhc3N3b3JkICk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfTtcclxufSApOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5ydW4oIGZ1bmN0aW9uKCAkcm9vdFNjb3BlLCAkd2luZG93ICl7XG4gICAgdmFyIGhvc3Q7XG4gICAgXG4gICAgaWYoICR3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonICl7XG4gICAgICAgIGhvc3QgPSAnd3NzOi8vJyArICR3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICB9ZWxzZXtcbiAgICAgICAgaG9zdCA9ICd3czovLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgfVxuICAgIFxuICAgIHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCggaG9zdCApO1xuXG4gICAgY29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbigpe1xuICAgICAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpO1xuICAgIH07XG5cbiAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCAnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSApO1xuICAgIH07XG59ICk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=